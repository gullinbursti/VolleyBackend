#! /bin/sh
### BEGIN INIT INFO
# Provides:          gearman-volley
# Required-Start:    $remote_fs $syslog gearman-job-server
# Required-Stop:     $remote_fs $syslog gearman-job-server
# Default-Start:     2 3 4 5
# Default-Stop:      0 1 6
# Short-Description: gearman-volley initscript
# Description:       Built in Menlo's VolleyBackend Gearman worker(s) to be
#                    placed in /etc/init.d.
### END INIT INFO

# Author: Pedro H <pedro@builtinmenlo.com>

# Do NOT "set -e"

# PATH should only include /usr/* if it runs after the mountnfs.sh script
PATH="/sbin:/usr/sbin:/bin:/usr/bin"
DESC="Built in Menlo's VolleyBackend Gearman worker(s)"
NAME="gearman-volley"

BIM_DEPLOYS="/opt/built-in-menlo"
VOLLEY_HOME="$BIM_DEPLOYS/volleybackend-gearman"
VOLLEY_CONFIG="$BIM_DEPLOYS/volleybackend-gearman-config/config.php"
VOLLEY_START_WORKER="$VOLLEY_HOME/bin/gearman/admin/start_workers.php"
PHP_INCLUDE_PATH="/usr/share/php:$VOLLEY_HOME/classes:$VOLLEY_HOME/lib:$VOLLEY_HOME/lib/smtp_mailer_swift/lib/classes"

GEARMAN_USER="gearman"
GEARMAN_GROUP="gearman"

DAEMON="/usr/bin/php"
DAEMON_ARGS=""
PIDFILE="/var/run/gearman/$NAME.pid"
SCRIPTNAME="/etc/init.d/$NAME"


# Exit if the package is not installed
[ -x "$DAEMON" ] || exit 0

# Read configuration variable file if it is present
[ -r /etc/default/$NAME ] && . /etc/default/$NAME

# Load the VERBOSE setting and other rcS variables
. /lib/init/vars.sh

# Define LSB log_* functions.
# Depend on lsb-base (>= 3.2-14) to ensure that this file is present
# and status_of_proc is working.
. /lib/lsb/init-functions

#
# Function that starts the daemon/service
#
do_start()
{
    # Old code to start the service
    # /home/volley/latest/bin/gearman/admin/start_workers.php -c /home/volley/latest/bin/gearman/admin/config.php -p /tmp/gearman_worker.pid -d -k start > /tmp/worker_start.log 2>&1 &'

    # Return
    #   0 if daemon has been started
    #   1 if daemon was already running
    #   2 if daemon could not be started
    start-stop-daemon \
        --start \
        --quiet \
        --chuid $GEARMAN_USER:$GEARMAN_GROUP \
        --pidfile $PIDFILE \
        --exec $DAEMON --test \
            > /dev/null || return 1
    start-stop-daemon \
        --start \
        --quiet \
        --chuid $GEARMAN_USER:$GEARMAN_GROUP \
        --pidfile $PIDFILE \
        --exec $DAEMON \
        -- \
            $DAEMON_ARGS \
            --define include_path="$PHP_INCLUDE_PATH" \
            "$VOLLEY_START_WORKER" -c "$VOLLEY_CONFIG" -p "$PIDFILE" -d -k start \
        || return 2
    # Add code here, if necessary, that waits for the process to be ready
    # to handle requests from services started subsequently which depend
    # on this one.  As a last resort, sleep for some time.
}

#
# Function that stops the daemon/service
#
do_stop()
{
    # Old call to stop service
    # '/usr/bin/php /home/volley/latest/bin/gearman/admin/start_workers.php -c /home/volley/latest/bin/gearman/admin/config.php -p /tmp/gearman_worker.pid -d -k stop > /tmp/worker_stop.log 2>&1'

    # Return
    #   0 if daemon has been stopped
    #   1 if daemon was already stopped
    #   2 if daemon could not be stopped
    #   other if a failure occurred
    start-stop-daemon \
        --stop \
        --quiet \
        --retry=TERM/30/KILL/5 \
        --pidfile $PIDFILE \
        --user "$GEARMAN_USER" \
        --name $NAME
    RETVAL="$?"
    [ "$RETVAL" = 2 ] && return 2

    # Try and use the PHP gearman worker code to stop
    "$DAEMON" \
        --define include_path="$PHP_INCLUDE_PATH" \
        "$VOLLEY_START_WORKER" \
        -c "$VOLLEY_CONFIG" \
        -p "$PIDFILE" \
        -d \
        -k stop
    RETVAL="$?"
    [ "$RETVAL" != 0 ] && return $RETVAL

    # Wait for children to finish too if this is a daemon that forks
    # and if the daemon is only ever run from this initscript.
    # If the above conditions are not satisfied then add some other code
    # that waits for the process to drop all resources that could be
    # needed by services started subsequently.  A last resort is to
    # sleep for some time.
    start-stop-daemon \
        --stop \
        --quiet \
        --oknodo \
        --retry=0/30/KILL/5 \
        --user "$GEARMAN_USER" \
        --exec $DAEMON
    [ "$?" = 2 ] && return 2
    # Many daemons don't delete their pidfiles when they exit.
    rm -f "$PIDFILE" "$PIDFILE.*"
    return "$RETVAL"
}

#
# Function that sends a SIGHUP to the daemon/service
#
do_reload() {
    #
    # If the daemon can reload its configuration without
    # restarting (for example, when it is sent a SIGHUP),
    # then implement that here.
    #
    start-stop-daemon --stop --signal 1 --quiet --pidfile $PIDFILE --name $NAME
    return 0
}

case "$1" in
  start)
    [ "$VERBOSE" != no ] && log_daemon_msg "Starting $DESC" "$NAME"
    do_start
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  stop)
    [ "$VERBOSE" != no ] && log_daemon_msg "Stopping $DESC" "$NAME"
    do_stop
    case "$?" in
        0|1) [ "$VERBOSE" != no ] && log_end_msg 0 ;;
        2) [ "$VERBOSE" != no ] && log_end_msg 1 ;;
    esac
    ;;
  status)
    status_of_proc "$DAEMON" "$NAME" && exit 0 || exit $?
    ;;
  #reload|force-reload)
    #
    # If do_reload() is not implemented then leave this commented out
    # and leave 'force-reload' as an alias for 'restart'.
    #
    #log_daemon_msg "Reloading $DESC" "$NAME"
    #do_reload
    #log_end_msg $?
    #;;
  restart|force-reload)
    #
    # If the "reload" option is implemented then remove the
    # 'force-reload' alias
    #
    log_daemon_msg "Restarting $DESC" "$NAME"
    do_stop
    case "$?" in
      0|1)
        do_start
        case "$?" in
            0) log_end_msg 0 ;;
            1) log_end_msg 1 ;; # Old process is still running
            *) log_end_msg 1 ;; # Failed to start
        esac
        ;;
      *)
        # Failed to stop
        log_end_msg 1
        ;;
    esac
    ;;
  *)
    #echo "Usage: $SCRIPTNAME {start|stop|restart|reload|force-reload}" >&2
    echo "Usage: $SCRIPTNAME {start|stop|status|restart|force-reload}" >&2
    exit 3
    ;;
esac

:
